## Create default rules for monitoring the cluster
##
defaultRules:
  create: false
  rules:
    alertmanager: false
    etcd: false
    configReloaders: false
    general: false
    k8s: false
    kubeApiserverAvailability: false
    kubeApiserverBurnrate: false
    kubeApiserverHistogram: false
    kubeApiserverSlos: false
    kubeControllerManager: false
    kubelet: false
    kubeProxy: false
    kubePrometheusGeneral: false
    kubePrometheusNodeRecording: false
    kubernetesApps: false
    kubernetesResources: false
    kubernetesStorage: false
    kubernetesSystem: false
    kubeSchedulerAlerting: false
    kubeSchedulerRecording: false
    kubeStateMetrics: false
    network: false
    node: false
    nodeExporterAlerting: false
    nodeExporterRecording: false
    prometheus: false
    prometheusOperator: false






  ## Service account for Alertmanager to use.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  ##
  serviceAccount:
    create: true
    name: ""
    annotations: {}


  ## Alertmanager configuration directives
  ## ref: https://prometheus.io/docs/alerting/configuration/#configuration-file
  ##      https://prometheus.io/webtools/alerting/routing-tree-editor/
  ##
  # config:
  #     global:
  #       resolve_timeout: 1m
  #       slack_api_url: 'https://hooks.slack.com/services/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'
  #     inhibit_rules:
  #       - source_matchers:
  #           - 'severity = critical'
  #         target_matchers:
  #           - 'severity =~ warning|info'
  #         equal:
  #           - 'namespace'
  #           - 'alertname'
  #       - source_matchers:
  #           - 'severity = warning'
  #         target_matchers:
  #           - 'severity = info'
  #         equal:
  #           - 'namespace'
  #           - 'alertname'
  #       - source_matchers:
  #           - 'alertname = InfoInhibitor'
  #         target_matchers:
  #           - 'severity = info'
  #         equal:
  #           - 'namespace'
  #     route:
  #       group_by: ['alertname']
  #       group_wait: 30s
  #       group_interval: 1m
  #       repeat_interval: 1m
  #       receiver: 'slack'
  #       routes:
  #       - receiver: 'slack'
  #         matchers:
  #           - alertname = "nginx_cpu_utilization"
  #           - severity = "critical"
  #     receivers:
  #     - name: 'slack'
  #       slack_config:
  #         - api_url: 'https://hooks.slack.com/services/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'
  #           channel: '#test-alerting'
  #           send_resolved: true

  ## Alertmanager configuration directives (as string type, preferred over the config hash map)
  ## stringConfig will be used only, if tplConfig is true
  ## ref: https://prometheus.io/docs/alerting/configuration/#configuration-file
  ##      https://prometheus.io/webtools/alerting/routing-tree-editor/
  ##
  stringConfig: ""
    # global:
    # resolve_timeout: 5m

    # route:
    #   group_by: ['alertname']
    #   group_wait: 30s
    #   group_interval: 5m
    #   repeat_interval: 12h
    #   routes:
    #   - match:
    #       severity: critical
    #     receiver: 'slack-notifications'
    #   - match:
    #       severity: warning
    #     receiver: 'email-notifications'

    # receivers:
    # - name: 'slack-notifications'
    #   slack_configs:
    #   - channel: '#alerts'
    #     api_url: 'https://hooks.slack.com/services/xxxxx/yyyyy/zzzzz'
    #     username: 'Alertmanager'
    #     send_resolved: true
    # - name: 'email-notifications'
    #   email_configs:
    #   - to: 'admin@example.com'
    #     from: 'alertmanager@example.com'
    #     smarthost: 'smtp.example.com:587'
    #     auth_username: 'alertmanager'
    #     auth_password: 'password'



  alertmanagerSpec:

    ## AlermanagerConfig to be used as top level configuration
    ##
    # alertmanagerConfiguration: {}
    ## Example with select a global alertmanagerconfig
    alertmanagerConfiguration:
      name: config-alertmanager

    ## SecurityContext holds pod-level security attributes and common container settings.
    ## This defaults to non root user with uid 1000 and gid 2000. *v1.PodSecurityContext  false
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    ##
    securityContext:
      runAsGroup: 2000
      runAsNonRoot: false
      runAsUser: 999
      fsGroup: 2000



## Deploy node exporter as a daemonset to all nodes
##
nodeExporter:
  enabled: true

  securityContext:
    fsGroup: 65534
    runAsGroup: 65534
    runAsNonRoot: true
    runAsUser: 65534

  ## Container-specific security context configuration
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  ##
  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true


  ## Thanos side-car image when configured
  ##
  thanosImage:
    registry: quay.io
    repository: thanos/thanos
    tag: v0.30.2
    sha: ""

  ## Set a Field Selector to filter watched secrets
  ##
  secretFieldSelector: ""

## Deploy a Prometheus instance
##
prometheus:

  enabled: true


  ## Settings affecting prometheusSpec
  ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#prometheusspec
  ##
  prometheusSpec:

    ## Image of Prometheus.
    ##
    image:
      registry: quay.io
      repository: prometheus/prometheus
      tag: v2.42.0
      sha: ""



    ## SecurityContext holds pod-level security attributes and common container settings.
    ## This defaults to non root user with uid 1000 and gid 2000.
    ## https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md
    ##
    securityContext:
      runAsGroup: 2000
      runAsNonRoot: true
      runAsUser: 1000
      fsGroup: 2000

  ## Settings affecting thanosRulerpec
  ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#thanosrulerspec
  ##
  thanosRulerSpec:
    ## Image of ThanosRuler
    ##
    image:
      registry: quay.io
      repository: thanos/thanos
      tag: v0.30.2
      sha: ""

    ## SecurityContext holds pod-level security attributes and common container settings.
    ## This defaults to non root user with uid 1000 and gid 2000. *v1.PodSecurityContext  false
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    ##
    securityContext:
      runAsGroup: 2000
      runAsNonRoot: true
      runAsUser: 1000
      fsGroup: 2000